name: CI
on:
  pull_request:
    branches: ['**']
  push:
    branches: ['**']
    tags: [v*]
  release:
    types: [published]
jobs:
  build2021-scala:
    name: Build and Test (Scala 2021)
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name != 'pomadchin/advent-of-code'
    strategy:
      matrix:
        os: [ubuntu-latest]
        java: [11]
        distribution: [temurin]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: coursier/cache-action@v6
      - uses: actions/setup-java@v3
        with:
          distribution: ${{ matrix.distribution }}
          java-version: ${{ matrix.java }}

      - name: Check formatting
        run: cd 2021/scala; sbt scalafmtCheckAll

      - name: Build project
        run: cd 2021/scala; sbt test

  build2022-scala:
    name: Build and Test (Scala 2022)
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name != 'pomadchin/advent-of-code'
    strategy:
      matrix:
        os: [ubuntu-latest]
        java: [11]
        distribution: [temurin]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: coursier/cache-action@v6
      - uses: actions/setup-java@v3
        with:
          distribution: ${{ matrix.distribution }}
          java-version: ${{ matrix.java }}

      - name: Check formatting
        run: cd 2022/scala; sbt scalafmtCheckAll

      - name: Build project
        run: cd 2022/scala; sbt test

  build2022-rust:
    name: Build and Test (Rust 2022)
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name != 'pomadchin/advent-of-code'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Set up cargo cache
        uses: actions/cache@v3
        continue-on-error: false
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            2022/rust/target/            
          key: ${{ runner.os }}-cargo-${{ hashFiles('2022/rust/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Decrypt GPG files
        run: |
          if compgen -G "2022/rust/src/*/*.gpg" > /dev/null; then
            for file in 2022/rust/src/*/*.gpg; do 
                output="${file%.*}"
                echo "$output decrypted"
                gpg --quiet --batch --yes --decrypt --passphrase="${{ secrets.GPG_PASSPHRASE_INPUTS }}" --output "$output" "$file"
            done
          fi
      
      - name: Check formatting
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --manifest-path 2022/rust/Cargo.toml --all -- --check

      - name: Build project
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --manifest-path 2022/rust/Cargo.toml

  build2023-rust:
    name: Build and Test (Rust 2023)
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name != 'pomadchin/advent-of-code'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Set up cargo cache
        uses: actions/cache@v3
        continue-on-error: false
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            2023/rust/target/            
          key: ${{ runner.os }}-cargo-${{ hashFiles('2023/rust/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Decrypt GPG files
        run: |
          if compgen -G "2023/rust/src/*/*.gpg" > /dev/null; then
            for file in 2023/rust/src/*/*.gpg; do 
                output="${file%.*}"
                echo "$output decrypted"
                gpg --quiet --batch --yes --decrypt --passphrase="${{ secrets.GPG_PASSPHRASE_INPUTS }}" --output "$output" "$file"
            done
          fi
      
      - name: Check formatting
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --manifest-path 2023/rust/Cargo.toml --all -- --check

      - name: Build project
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --manifest-path 2023/rust/Cargo.toml
  